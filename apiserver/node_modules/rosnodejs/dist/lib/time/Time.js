"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Time = exports.initializeRosTime = void 0;
const TimeUtils = require("./time_utils");
let useSimTime = false;
let simTime = TimeUtils.dateToRosTime(0);
function handleSimTimeMessage(msg) {
    simTime = msg.clock;
}
function initializeRosTime(nh, notime) {
    return __awaiter(this, void 0, void 0, function* () {
        //Only for testing purposes!
        if (notime) {
            return;
        }
        try {
            useSimTime = yield nh.getParam('/use_sim_time');
            if (useSimTime) {
                nh.subscribe('/clock', 'rosgraph_msgs/Clock', handleSimTimeMessage, { throttleMs: -1 });
            }
        }
        catch (err) {
            if (err.statusCode === undefined) {
                throw err;
            }
        }
    });
}
exports.initializeRosTime = initializeRosTime;
exports.Time = {
    now() {
        if (useSimTime) {
            return simTime;
        }
        // else
        return TimeUtils.now();
    },
    rosTimeToDate: TimeUtils.rosTimeToDate,
    dateToRosTime: TimeUtils.dateToRosTime,
    epoch: TimeUtils.epoch,
    isZeroTime: TimeUtils.isZeroTime,
    toNumber: TimeUtils.toNumber,
    toSeconds: TimeUtils.toSeconds,
    timeComp: TimeUtils.timeComp,
    add: TimeUtils.add,
    lt: TimeUtils.lt,
};
