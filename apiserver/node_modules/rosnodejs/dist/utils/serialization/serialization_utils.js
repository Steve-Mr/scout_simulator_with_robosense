"use strict";
/*
 *    Copyright 2016 Rethink Robotics
 *
 *    Copyright 2016 Chris Smith
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeString = exports.serializeString = exports.deserializeStringFields = exports.serializeStringFields = exports.PrependLength = void 0;
const ros_msg_utils = require("../../ros_msg_utils/index");
const base_serializers = ros_msg_utils.Serialize;
const base_deserializers = ros_msg_utils.Deserialize;
//-----------------------------------------------------------------------
function PrependLength(buffer) {
    let lenBuf = Buffer.allocUnsafe(4);
    lenBuf.writeUInt32LE(buffer.length, 0);
    return Buffer.concat([lenBuf, buffer], buffer.length + 4);
}
exports.PrependLength = PrependLength;
function serializeStringFields(fields) {
    let length = 0;
    for (const field of fields) {
        length += (Buffer.byteLength(field) + 4);
    }
    let buffer = Buffer.allocUnsafe(4 + length);
    let offset = base_serializers.uint32(length, buffer, 0);
    for (const field of fields) {
        offset = base_serializers.string(field, buffer, offset);
    }
    return buffer;
}
exports.serializeStringFields = serializeStringFields;
function deserializeStringFields(buffer) {
    const fields = [];
    const offset = [0];
    while (offset[0] < buffer.length) {
        const str = base_deserializers.string(buffer, offset);
        fields.push(str);
    }
    return fields;
}
exports.deserializeStringFields = deserializeStringFields;
function serializeString(str) {
    const buf = Buffer.allocUnsafe(str.length + 4);
    base_serializers.string(str, buf, 0);
    return buf;
}
exports.serializeString = serializeString;
function deserializeString(buffer) {
    return base_deserializers.string(buffer, [0]);
}
exports.deserializeString = deserializeString;
